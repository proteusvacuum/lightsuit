#include <FlexiTimer2.h>
#include <avr/pgmspace.h>

//Letters
#define A {{B00000011,B10000000},{B00000011,B11000000},{B00000011,B11000000},{B00000101,B11000000},{B00000100,B11100000},{B00001100,B11100000},{B00001000,B11110000},{B00001000,B01110000},{B00010000,B01110000},{B00010000,B00111000},{B00111111,B11111000},{B00100000,B00111100},{B00100000,B00011100},{B01000000,B00011100},{B11110000,B00111111},{B00000000,B00000000}}
#define B {{B01111111,B11100000},{B00011000,B00110000},{B00011000,B00011000},{B00011000,B00011000},{B00011000,B00011000},{B00011000,B00110000},{B00011111,B11100000},{B00011000,B00111000},{B00011000,B00011000},{B00011000,B00001100},{B00011000,B00001100},{B00011000,B00001100},{B00011000,B00011100},{B00011000,B00111000},{B01111111,B11100000},{B00000000,B00000000}}
#define C {{B00000000,B00000000},{B00000011,B11110000},{B00001100,B00011000},{B00011000,B00001000},{B00011000,B00000000},{B00110000,B00000000},{B00110000,B00000000},{B00110000,B00000000},{B00110000,B00000000},{B00110000,B00000000},{B00011000,B00001000},{B00011000,B00011000},{B00001100,B00110000},{B00000011,B11100000},{B00000000,B00000000},{B00000000,B00000000}}
#define D {{B11111111,B11100000},{B00111100,B00111000},{B00111100,B00011100},{B00111100,B00011110},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00001111},{B00111100,B00011110},{B00111100,B00011100},{B00111100,B00111000},{B11111111,B11100000},{B00000000,B00000000}}
#define E {{B01111111,B11111110},{B00011110,B00000010},{B00011110,B00000010},{B00011110,B00000000},{B00011110,B00001000},{B00011110,B00001000},{B00011110,B00001000},{B00011111,B11111000},{B00011110,B00001000},{B00011110,B00000000},{B00011110,B00000000},{B00011110,B00000000},{B00011110,B00000010},{B00011110,B00000010},{B00011110,B00000010},{B01111111,B11111110}}
#define EFF {{B00111111,B11111110},{B00001110,B00000010},{B00001110,B00000010},{B00001110,B00000000},{B00001110,B00001000},{B00001110,B00001000},{B00001111,B11111000},{B00001110,B00001000},{B00001110,B00001000},{B00001110,B00000000},{B00001110,B00000000},{B00001110,B00000000},{B00001110,B00000000},{B00001110,B00000000},{B00111111,B10000000},{B00000000,B00000000}}
#define G {{B00000111,B11111000},{B00011110,B00001110},{B00111000,B00000110},{B01111000,B00000010},{B01110000,B00000010},{B11110000,B00000000},{B11110000,B00000000},{B11110000,B00000000},{B11110000,B00111111},{B11110000,B00001111},{B11110000,B00001111},{B01110000,B00001111},{B01111000,B00001111},{B00111000,B00001111},{B00011100,B00011111},{B00000111,B11111000}}
#define H {{B11111110,B00111111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111111,B11111111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B01111000,B00001111},{B11111110,B00111111}}
#define I {{B00001111,B11100000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00000011,B10000000},{B00001111,B11100000},{B00000000,B00000000}}
#define J {{B00000001,B11110000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000000,B01100000},{B00000100,B01000000},{B00000111,B10000000}}
#define K {{B11111100,B11111000},{B00110000,B01100000},{B00110000,B11000000},{B00110001,B10000000},{B00110011,B00000000},{B00110110,B00000000},{B00111100,B00000000},{B00111100,B00000000},{B00110110,B00000000},{B00110111,B00000000},{B00110011,B10000000},{B00110001,B11000000},{B00110000,B11100000},{B00110000,B01110000},{B11111100,B00111100},{B00000000,B00000000}}
#define L {{B01111111,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000100},{B00011100,B00000100},{B01111111,B11111100},{B00000000,B00000000}}
#define M {{B00000000,B00000000},{B11100000,B00001110},{B01100000,B00011100},{B01110000,B00011100},{B01110000,B00101100},{B01011000,B00101100},{B01011100,B01001100},{B01001100,B01001100},{B01001110,B10001100},{B01000110,B10001100},{B01000111,B10001100},{B01000011,B00001100},{B01000000,B00001100},{B11100000,B00011110},{B00000000,B00000000},{B00000000,B00000000}}
#define N {{B11110000,B00001111},{B00111000,B00000010},{B00111100,B00000010},{B00111110,B00000010},{B00111111,B00000010},{B00101111,B10000010},{B00100111,B11000010},{B00100011,B11100010},{B00100001,B11110010},{B00100000,B11111010},{B00100000,B01111110},{B00100000,B00111110},{B00100000,B00011110},{B00100000,B00001110},{B11111000,B00000110},{B00000000,B00000000}}
#define HOO {{B00000111,B11110000},{B00011100,B00011100},{B00111000,B00001110},{B01111000,B00001111},{B01110000,B00000111},{B11110000,B00000111},{B11110000,B00000111},{B11110000,B00000111},{B11110000,B00000111},{B11110000,B00000111},{B11110000,B00000111},{B01110000,B00000111},{B01111000,B00001111},{B00111000,B00001110},{B00011100,B00011100},{B00000111,B11110000}}
#define P {{B01111111,B11110000},{B00011100,B00111100},{B00011100,B00011100},{B00011100,B00001110},{B00011100,B00001110},{B00011100,B00001110},{B00011100,B00011100},{B00011100,B00111100},{B00011111,B11110000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B00011100,B00000000},{B01111111,B00000000},{B00000000,B00000000}}
#define Q {{B00000000,B00000000},{B00001111,B11000000},{B00011000,B01100000},{B00110000,B00110000},{B01100000,B00011000},{B01100000,B00011000},{B01100000,B00011000},{B01100000,B00011000},{B01100000,B00011000},{B01100000,B00011000},{B00110000,B00110000},{B00011000,B01100000},{B00001111,B10000000},{B00000001,B10000000},{B00000000,B11100000},{B00000000,B01100000}}
#define R {{B11111111,B11100000},{B00111000,B01111000},{B00111000,B00111100},{B00111000,B00011100},{B00111000,B00011100},{B00111000,B00011100},{B00111000,B00111100},{B00111000,B01111000},{B00111111,B11110000},{B00111000,B01110000},{B00111000,B00111000},{B00111000,B00111000},{B00111000,B00011100},{B00111000,B00011100},{B11111110,B00001111},{B00000000,B00000000}}
#define S {{B00000111,B11111000},{B00011100,B00111100},{B00011000,B00001100},{B00111000,B00001100},{B00111000,B00000000},{B00111110,B00000000},{B00111111,B11100000},{B00011111,B11111000},{B00001111,B11111100},{B00000011,B11111110},{B00000000,B01111110},{B00110000,B00011110},{B00110000,B00011110},{B00110000,B00011100},{B00111000,B00111100},{B00001111,B11110000}}
#define T {{B11111111,B11111111},{B10000011,B11000001},{B10000011,B11000001},{B10000011,B11000001},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00001111,B11110000}}
#define U {{B11111110,B00011111},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B01111000,B00000110},{B00111100,B00001100},{B00011110,B00011000},{B00001111,B11110000}}
#define V {{B01111100,B00001111},{B00011000,B00000100},{B00011000,B00000100},{B00011000,B00000100},{B00001100,B00001000},{B00001100,B00001000},{B00001110,B00011000},{B00000110,B00010000},{B00000110,B00010000},{B00000111,B00100000},{B00000011,B00100000},{B00000011,B11100000},{B00000001,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000000,B00000000}}
#define W {{B11100000,B10000111},{B11000001,B11000001},{B11000001,B11000001},{B11000001,B11000001},{B11000011,B11000001},{B01100010,B01100010},{B01100010,B01100010},{B01100010,B01100010},{B01100100,B01110010},{B00110100,B00110100},{B00110100,B00110100},{B00111100,B00111100},{B00111000,B00011100},{B00011000,B00011000},{B00011000,B00011000},{B00000000,B00000000}}
#define X {{B01111110,B01111100},{B00011100,B00010000},{B00001100,B00100000},{B00001110,B00100000},{B00000110,B01000000},{B00000011,B11000000},{B00000011,B10000000},{B00000001,B10000000},{B00000011,B11000000},{B00000010,B11000000},{B00000100,B01100000},{B00001100,B01110000},{B00001000,B00110000},{B00010000,B00111000},{B01111100,B01111110},{B00000000,B00000000}}
#define Y {{B01111110,B00011110},{B00011100,B00001100},{B00011110,B00001000},{B00001110,B00011000},{B00001111,B00010000},{B00000111,B10100000},{B00000011,B10100000},{B00000011,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000001,B11000000},{B00000111,B11110000},{B00000000,B00000000}}
#define Z {{B00111111,B11111100},{B00100000,B00111000},{B00100000,B00110000},{B00000000,B01110000},{B00000000,B11100000},{B00000000,B11000000},{B00000001,B10000000},{B00000011,B10000000},{B00000111,B00000000},{B00000110,B00000000},{B00001110,B00000000},{B00011100,B00000000},{B00011000,B00000100},{B00111000,B00000100},{B01111111,B11111100},{B00000000,B00000000}}

//Pictures
#define OFF {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000}}
#define HEART {{B00000000,B00000000},{B00000000,B00000000},{B00001000,B00001000},{B00011100,B00011100},{B00111110,B00111110},{B01111111,B01111111},{B01111111,B11111111},{B01111111,B11111111},{B00111111,B11111110},{B00011111,B11111100},{B00001111,B11111000},{B00000111,B11110000},{B00000011,B11100000},{B00000001,B11000000},{B00000000,B10000000},{B00000000,B00000000}}
#define DOLLAH {{B00000001,B10000000},{B00000001,B10000000},{B00000011,B11110000},{B00000111,B11110000},{B00001100,B00110000},{B00001100,B00000000},{B00001111,B10000000},{B00000111,B11100000},{B00000000,B01110000},{B00001100,B00110000},{B00001100,B01110000},{B00001111,B11100000},{B00001111,B11000000},{B00000001,B10000000},{B00000001,B10000000},{B00000001,B10000000}}
#define GOOSE {{B00000000,B00000000},{B00000000,B00001000},{B00000000,B00111000},{B00000000,B01100000},{B00000000,B01000000},{B00000000,B11000000},{B00000000,B11000000},{B00000011,B11000000},{B00000111,B11000000},{B00001111,B11000000},{B00111111,B11000000},{B00011101,B10000000},{B00011111,B00000000},{B00000100,B01000000},{B00000100,B10000000},{B00000000,B00000000}}
#define CAR {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000011,B11111000},{B00000100,B00000100},{B00011000,B00000110},{B11111111,B11111111},{B11100111,B11110011},{B11010011,B11101001},{B00111000,B00001100},{B00000000,B00000000},{B00000000,B00000000}}
#define HOUSE {{B00000000,B00000000},{B00000011,B11000000},{B00001111,B11110000},{B00111111,B11111100},{B11111111,B11111111},{B00111111,B11111100},{B00111111,B11111100},{B00111111,B11111100},{B00111111,B11111100},{B00111110,B01111100},{B00111110,B01111100},{B00111110,B01111100},{B00111110,B01111100},{B00111110,B01111100},{B00000000,B00000000},{B00000000,B00000000}}
#define SADFACE {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00110000,B01100000},{B00110000,B01100000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000111,B11100000},{B00111111,B11111100},{B11110000,B00001111},{B10000000,B00000001},{B00000000,B00000000},{B00000000,B00000000}}
#define SUN {{B00000000,B00000000},{B00000001,B10000000},{B00000001,B10000000},{B00011000,B00011000},{B00010011,B11001000},{B00000111,B11100000},{B00001111,B11110000},{B01101111,B11110110},{B01101111,B11110110},{B00001111,B11110000},{B00000111,B11100000},{B00010011,B11001000},{B00011000,B00011000},{B00000001,B10000000},{B00000001,B10000000},{B00000000,B00000000}}
#define SUNOFF {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000011,B11000000},{B00000111,B11100000},{B00001111,B11110000},{B00001111,B11110000},{B00001111,B11110000},{B00001111,B11110000},{B00000111,B11100000},{B00000011,B11000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000}}
#define EXCLAIM {{B00000001,B10000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000001,B10000000},{B00000001,B10000000},{B00000001,B10000000},{B00000001,B10000000},{B00000000,B00000000},{B00000000,B00000000},{B00000001,B10000000},{B00000001,B10000000},{B00000000,B00000000}}
#define AT {{B00000111,B11100000},{B00011100,B00011000},{B00110000,B00001100},{B01100000,B00000100},{B01100011,B10110010},{B11000110,B01110010},{B11001100,B00110010},{B11001100,B00110010},{B11001100,B00110010},{B11000110,B01110100},{B01100011,B10111000},{B01100000,B00000000},{B00110000,B00000000},{B00011100,B00010000},{B00000111,B11100000},{B00000000,B00000000}}
//Numbers
#define ONE {{B00000011,B11000000},{B00001111,B11000000},{B00011011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00011111,B11111000},{B00000000,B00000000}}
#define THREE {{B00001111,B11100000},{B00011000,B01110000},{B00010000,B00111000},{B00000000,B00111000},{B00000000,B00111000},{B00000000,B01110000},{B00000001,B11110000},{B00000000,B00111000},{B00000000,B00111100},{B00000000,B00011100},{B00000000,B00011100},{B00010000,B00011100},{B00010000,B00011100},{B00011000,B01111000},{B00000111,B11100000},{B00000000,B00000000}}
#define FIVE {{B00000011,B11000000},{B00001111,B11000000},{B00011011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00000011,B11000000},{B00011111,B11111000},{B00000000,B00000000}}

#define EYECENTRE {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00001010,B10100000},{B00100000,B00001000},{B00000111,B11100000},{B00011100,B00111000},{B00111000,B00011100},{B01111001,B10011110},{B00111000,B00011100},{B00011100,B00111000},{B00000111,B11100000},{B00000000,B00000000},{B00000000,B00000000}}
#define EYECENTRE1 {{B00000000,B00000000},{B00001010,B10100000},{B00100000,B00001000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000111,B11100000},{B00011100,B00111000},{B00111000,B00011100},{B01111001,B10011110},{B00111000,B00011100},{B00011100,B00111000},{B00000111,B11100000},{B00000000,B00000000},{B00000000,B00000000}}
#define ARROWRIGHT {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000100},{B00000000,B00111100},{B00000001,B11111100},{B00001111,B11111100},{B01111111,B11111111},{B11111111,B11111111},{B01111111,B11111111},{B00001111,B11111100},{B00000001,B11111100},{B00000000,B00111100},{B00000000,B00000100},{B00000000,B00000000},{B00000000,B00000000}}
#define LINE {{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B11111111,B11111111},{B11111111,B11111111},{B11111111,B11111111},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000},{B00000000,B00000000}}

#define NUMPATTERNS 44

byte curPat[16][2]=OFF;
int pattern;

int mode= 0;//The current mode / song
#define NUMMODES 9

uint8_t patterns[NUMPATTERNS][16][2] PROGMEM = {OFF,A,B,C,D,E,EFF,G,H,I,J,K,L,M,N,HOO,P,Q,R,S,T,U,V,W,X,Y,Z,HEART, DOLLAH,SADFACE,SUN,CAR,HOUSE,SUNOFF,EXCLAIM,AT,ONE,THREE,FIVE,EYECENTRE,EYECENTRE1,ARROWRIGHT,LINE,GOOSE};
//---------------------------------------------0-----1-----2--------3----------4-----5----6----7--8--9--10--11-12-13-14-----15-16
//uint8_t patterns[NUMPATTERNS][16][2] PROGMEM={OFF, HEART, DOLLAH, SADFACE, EXCLAIM, HOUSE,CAR, E, G, H, HOO, S, T,U, THUMB, SUN,D};

int bitCounter = 0;
int numBytesincoming = 0;
boolean incomingComplete = false;

      byte receivedSequence[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      byte receivedMethod[26]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
      int receivedTimes[26]={25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25};
      byte receivedLength=2;

//______-------------SEQUENCES!!!
      byte offSequence[2]={0,0};
      byte offMethod[2]={5,5};
      int offTimes[2]={50,50};
      byte offLength=2;

      //LOOK AROUND
      byte eyeSequence[2]={39,40};
      byte eyeMethod[2]={6,6};
      int eyeTimes[2]={150,150};
      byte eyeLength = 2;
      
      //APPLAUSE!
      byte applauseSequence[10] = {1,16,16,12,1,21,19,5,34,0};
      byte applauseMethod[10] = {1,1,1,1,1,1,1,1,3,4};
      int applauseTimes[10] = {25,25,25,25,25,25,25,25,25,25};
      byte applauseLength = 10;
      
      //BAD TIME
      byte badTimeSequence[2]={29,34};
      byte badTimeMethod[2]={5,5};
      int badTimeTimes[2]={100,100};
      byte badTimeLength = 2;
      
          //    //MONEY MONEY LOVE LOVE
      byte moneyLoveSequence[4]={28,28,27,27};
      byte moneyLovemethod[4]={5,5,5,5};
      int moneyLovetimes[4]={75,75,75,75};
      byte moneyLoveLength = 4;
      
      //"GOOSE HUT"
      byte gooseHutSequence[10]={7,15,15,19,5,0,8,21,20,27};
      byte gooseHutMethod[10]={1,1,1,1,1,1,1,1,1,3};
      int gooseHutTimes[10]={25,25,25,25,25,25,25,25,25,25};
      byte gooseHutLength=10;
      
      //HOLD ON THROW IT AT YR DAD'S HOUSE
      byte houseSequence[2]={32,31};
      byte houseMethod[2]={5,5};
      int houseTimes[2]={100,100};
      byte houseLength=2;

      byte summerSequence[2]={30,33};
      byte summerMethod[2]={5,5};
      int summerTimes[2]={150,150};
      byte summerLength=2;
     
//__________))))))))_)(_)#(#####################



byte screenBuffer[4] =
{
  //This is what gets sent to the shift registers. screenBuffer[0] and screenBuffer[1] are the negatives (bits 0-15). 
  B11111111, B11111111,
  B00000000, B00000000,
};

//--- Pin connected to ST_CP of 74HC595
int latchPin = 10;
//--- Pin connected to SH_CP of 74HC595
int clockPin = 13;
//--- Pin connected to DS of 74HC595
int dataPin = 11;
//--- Used for faster latching
int latchPinPORTB = latchPin - 8;

//--- Input Ports for Mode Buttons
const int buttonPins[2]={2,3};

int pbIn0=0;//Button pin 2
int pbIn1=1;//button pin 3

//--- Direct port access latching
void latchOn(){
  bitSet(PORTB,latchPinPORTB);
}
void latchOff(){
  bitClear(PORTB,latchPinPORTB);
}

//--- Used to setup SPI based on current pin setup
//    this is called in the setup routine;
void setupSPI(){
  byte clr;
  SPCR |= ( (1<<SPE) | (1<<MSTR) ); // enable SPI as master
  SPCR &= ~( (1<<SPR1) | (1<<SPR0) ); // clear prescaler bits
  clr=SPSR; // clear SPI status reg
  clr=SPDR; // clear SPI data reg
  SPSR |= (1<<SPI2X); // set prescaler bits
  delay(10);
}

//--- The really fast SPI version of shiftOut
byte spi_transfer(byte data)
{
  SPDR = data;			  // Start the transmission
  loop_until_bit_is_set(SPSR, SPIF);
  return SPDR;			  // return the received byte, we don't need that
}


void setPattern(byte in[16][2]){
  for (int i=0; i<16; i++){
    for(int j=0; j<2; j++){
      curPat[i][j]=in[i][j];
    }
  }
}

void clearPattern(){
//empties curPat
  for (int i=0;i<16;i++){
    for (int j=0;j<2;j++){
      curPat[i][j]=0;
    }
  }
}

byte reverse(byte b){
  //reverses the bytes, from http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious
  //This means that the shift registers go are MSB to LSB, what comes out is what it looks like on the screen... 
  b = ((b * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
  return b;
}

void screenFlip(){
  //Writes the contents of the registers to the screen
latchOff();
  for (int i =0;i<4;i++){
    spi_transfer(reverse(screenBuffer[3-i]));//Writes them backwards, otherwise it doesn't work. 
  }
latchOn();
}

void bitmapUpdate()//DRAW SCREEN
{  
  int x; // col counter
  int y; // row counter
  
  for(y = 0; y < 16; y++) // for 16 rows do...
  { 
    for(x = 0; x < 2; x++)
    {
	screenBuffer[x+2] = ~curPat[y][x]; // read the current row X data into into the screen buffers 0,1. Inverse the bits (~) as the anodes are connected to these registers.
    }

  //scroll through the rows by turning on each row at a time. If there are LED's on in the row, it will be dealt with by the anodes. 
    switch(y / 8)
    {
	case 0: // ie 3 / 8 = integer 0
	  if(screenBuffer[0] == 0) // see if the first 8 rows is turned off
	  { // if so
	    screenBuffer[1] = B00000000; // turn off the last 8 rows
	    screenBuffer[0] = B10000000; // set the first bit to one, mines backwards
	  }
	  else // if not
	  {
	    screenBuffer[0] = screenBuffer[0] >> 1; // shift the bit one space, or to the next row
	  }
	break;
	// repeat
	case 1:
	  if(screenBuffer[1] == 0)
	  {
	    screenBuffer[0] = B00000000;
	    screenBuffer[1] = B10000000;

	  }
	  else
	  {
	    screenBuffer[1] = screenBuffer[1] >> 1;
	  }
	break;

    } // end switch  
    screenFlip(); // show screen
  } // end y for loop  
} // end function


void modeUp(){
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
  // If interrupts come faster than 200ms, assume it's a bounce and ignore
  if (interrupt_time - last_interrupt_time > 200)
  {
      mode = (mode+1)%NUMMODES;
  }
  last_interrupt_time = interrupt_time;

}
void modeDown(){
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
  // If interrupts come faster than 200ms, assume it's a bounce and ignore
  if (interrupt_time - last_interrupt_time > 200)
  {
    mode<=0?mode=NUMMODES-1:mode=mode-1;
  }
  last_interrupt_time = interrupt_time;

}

void goModal(){
 // clearPattern();
  switch(mode){
    case 0:
      //Intro
     // sequencer(offSequence,offMethod,offTimes,offLength);  
      sequencer(receivedSequence,receivedMethod,receivedTimes,receivedLength);    
    break;
    case 1:
      //Applause!
      sequencer(applauseSequence, applauseMethod,applauseTimes,applauseLength);           
    break;
    case 2:
      sequencer(badTimeSequence,badTimeMethod,badTimeTimes,badTimeLength);
    break;
    case 3:
       sequencer(houseSequence,houseMethod,houseTimes,houseLength);
    break; 
    case 4:
       randomNoise(-1,100);
    break;
    case 5:
      //MACE
      spiral(3,1);
      spiral(3,0);
      lines(3);
      spiral(3,0);
     break;  
    case 6:
       //Money Money Love Love
        sequencer(moneyLoveSequence,moneyLovemethod,moneyLovetimes,moneyLoveLength);     
    break;
    case 7:
       //Check it out::EYES!!
        sequencer(eyeSequence,eyeMethod,eyeTimes,eyeLength);
    break;
    default:
        randomNoise(-1,100);
    break;
  }
   
}

void receivedSequenceBuilder(byte in,byte _bitCounter){
  receivedSequence[_bitCounter] = in;  
}
void setNumberofIncomingBytes(byte in){
  receivedLength = in;
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    byte in = Serial.read();
    if (in != 127 && bitCounter == 0){//first byte
      //numBytesincoming = in;
      setNumberofIncomingBytes(in);
      bitCounter++;
      //Serial.print("Received first byte! ");
      //Serial.println(in);
    }
    else if (in!=127&&bitCounter>0)
    {
      //add to the sequence array;
      receivedSequence[bitCounter-1] = in;      
      bitCounter++;
    }    
    if (in == 127){
      incomingComplete = true;
      bitCounter = 0;
      //Serial.print("Receiving over!");
      //Serial.println(in);
    }
  }    
}

void setup() {
  Serial.begin(9600);
  
  //---Set SPI pins as output
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);

  digitalWrite(latchPin,LOW);
  digitalWrite(dataPin,LOW);
  digitalWrite(clockPin,LOW);
  
   //--- Setup to run SPI
  setupSPI();
  
    //---Set button pins as input;
//  for (int i=0;i<2;i++){
//    pinMode(buttonPins[i],INPUT);
//  }  
attachInterrupt(pbIn0,modeDown,RISING);//Attach interrupts to buttons. 
attachInterrupt(pbIn1,modeUp,RISING);
  // Get Random  
  randomSeed(analogRead(0));

  //Timer Routines to Refresh the display every 5ms. 
  FlexiTimer2::set(10, bitmapUpdate); 
  FlexiTimer2::start();
}


void loop() {
  //Serial.println(mode);
  //Serial.println();
  goModal();
}
